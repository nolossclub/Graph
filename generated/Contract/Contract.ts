// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Winner extends ethereum.Event {
  get params(): Winner__Params {
    return new Winner__Params(this);
  }
}

export class Winner__Params {
  _event: Winner;

  constructor(event: Winner) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  lendBal(): BigInt {
    let result = super.call("lendBal", "lendBal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lendBal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lendBal", "lendBal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lotto(): BigInt {
    let result = super.call("lotto", "lotto():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lotto(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lotto", "lotto():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolBal(): BigInt {
    let result = super.call("protocolBal", "protocolBal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolBal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolBal", "protocolBal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RunCall extends ethereum.Call {
  get inputs(): RunCall__Inputs {
    return new RunCall__Inputs(this);
  }

  get outputs(): RunCall__Outputs {
    return new RunCall__Outputs(this);
  }
}

export class RunCall__Inputs {
  _call: RunCall;

  constructor(call: RunCall) {
    this._call = call;
  }
}

export class RunCall__Outputs {
  _call: RunCall;

  constructor(call: RunCall) {
    this._call = call;
  }
}
